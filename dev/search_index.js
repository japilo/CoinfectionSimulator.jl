var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Main-Functions","page":"API Reference","title":"Main Functions","text":"","category":"section"},{"location":"api/#CoinfectionSimulator.coinfection_simulator","page":"API Reference","title":"CoinfectionSimulator.coinfection_simulator","text":"coinfectionsimulator(; \tinitialpop::Vector{<:AbstractMatrix{Bool}}, \tages::Vector{Int}, \tinteractions::Matrix{Float64}, \tdiseasetype::Vector{String}, \tbasemortality::Float64, \tdiseasemortality::Vector{Float64}, \tfecundity::Float64, \ttransmission::Vector{Float64}, \ttimesteps::Int, \tagematurity::Int, \tintroduction::String = \"simultaneous\", \tlatency::Union{Vector{Int}, Nothing} = nothing, \trecovery::Union{Vector{Float64}, Nothing} = nothing, \timmunityloss::Union{Vector{Float64}, Nothing} = nothing   ) -> Tuple{Vector{Vector{<:AbstractMatrix{Bool}}}, Vector{Vector{Int}}}\n\nSimulates multiple pathogen strains spreading through a host population with possible coinfection dynamics.\n\nArguments\n\ninitial_pop::Vector{<:AbstractMatrix{Bool}}: Vector of matrices representing the initial population.  Each matrix represents an individual, with rows corresponding to strains and columns  representing disease states (Susceptible, Exposed, Infected, Recovered as [S,E,I,R]). Can be either Matrix{Bool} or BitMatrix.\nages::Vector{Int}: Ages of each individual in the initial population.\ninteractions::Matrix{Float64}: Matrix of interaction factors between strains. Values > 1 indicate  synergistic interactions, values < 1 indicate antagonistic interactions.\ndisease_type::Vector{String}: Vector specifying model type for each strain.  Must be one of: \"si\", \"sir\", \"seir\", or \"seirs\".\nbase_mortality::Float64: Background mortality rate per time step.\ndisease_mortality::Vector{Float64}: Additional mortality rate for each strain when infected.\nfecundity::Float64: Mean number of offspring per mature individual per time step.\ntransmission::Vector{Float64}: Transmission probability for each strain.\ntime_steps::Int: Number of time steps to simulate.\nage_maturity::Int: Age at which individuals can reproduce.\nintroduction::String: How strains are introduced: \"simultaneous\" (all at once) or  \"random\" (randomly throughout simulation) or \"none\" (no infections are introduced by the function).  Default is \"simultaneous\".\nlatency::Union{Vector{Int}, Nothing}: Required for SEIR/SEIRS models. Vector of latency periods  for each strain (number of time steps in exposed state).\nrecovery::Union{Vector{Float64}, Nothing}: Required for SIR/SEIR/SEIRS models.  Recovery probability for each strain.\nimmunity_loss::Union{Vector{Float64}, Nothing}: Required for SEIRS models. Probability of losing immunity for each strain.\n\nReturns\n\nA tuple containing:\n\nVector of population states at each time step, where each state is a vector of individual matrices\nVector of individual ages at each time step (in the same order as the population states)\n\nDisease State Format\n\nEach individual is represented by an n×4 matrix where n is the number of strains:\n\nColumn 1: Susceptible state (true if susceptible)\nColumn 2: Exposed state (true if exposed, for SEIR/SEIRS models)\nColumn 3: Infected state (true if infected)\nColumn 4: Recovered state (true if recovered, for SIR/SEIR/SEIRS models)\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.virtual_ecologist_sample","page":"API Reference","title":"CoinfectionSimulator.virtual_ecologist_sample","text":"virtual_ecologist_sample(;\n\tvirtual_population,\n\tproportion_sampled::Float64,\n\tfalse_positive_rate::Float64,\n\tfalse_negative_rate::Float64\n) -> Matrix{Bool}\n\nSimulates sampling by a virtual ecologist with imperfect detection capabilities.\n\nArguments\n\nvirtual_population: Population data across time steps (Vector{Vector{Matrix{Bool}}} or similar). Each element represents a time step, containing a vector of individual matrices. Each individual matrix has rows for strains and columns for disease states (S,E,I,R).\nproportion_sampled::Float64: Proportion of the population sampled at each time step (0-1).\nfalse_positive_rate::Float64: Probability of detecting a strain when it's not present (0-1).\nfalse_negative_rate::Float64: Probability of not detecting a strain when it is present (0-1).\n\nReturns\n\nMatrix{Bool}: Detection matrix with dimensions (ntimesteps, nstrains). Each element indicates whether a strain was detected at that time step.\n\nExamples\n\n# Create sample population data\npop = [[rand(Bool, 3, 4) for _ in 1:10] for _ in 1:5]  # 5 timesteps, 10 individuals, 3 strains\n\n# Sample with 50% sampling rate and 10% error rates\ndetections = virtual_ecologist_sample(\n\tvirtual_population=pop,\n\tproportion_sampled=0.5,\n\tfalse_positive_rate=0.1,\n\tfalse_negative_rate=0.1\n)\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.prep_interaction_matrix","page":"API Reference","title":"CoinfectionSimulator.prep_interaction_matrix","text":"prep_interaction_matrix(; df::DataFrame) -> Vector{Matrix{Float64}}\n\nGenerates interaction matrices for coinfection simulations based on DataFrame parameters. Interactions are sampled from a uniform distribution, whose bounds are defined by the ratio of competition to facilitation in the pathogen community, and the interaction strength.\n\nArguments\n\ndf::DataFrame: DataFrame containing the following required columns:\n:interaction_strength (Float64): Defines the outer bounds of the interaction multipliers. For example, an interaction strength of 0.1 means that the interaction multipliers will be sampled from a uniform distribution between 0.9 and 1.1. Interaction strength must be between 0 and 1.\n:cf_ratio (Float64): Defines the ratio of facilitation to competition in the interaction matrix. A ratio less than 0.5 means that the matrix will have more competitive interactions, while a ratio greater than 0.5 means that the matrix will have more facilitative interactions. The ratio must be between 0 and 1.\n:priority_effects (Bool): When true, the interaction matrix is asymmetric (priority effects). When false, the matrix is symmetric (no priority effects).\n:strains (Int): Number of strains in the pathogen community (determines interaction matrix dimensions).\n\nReturns\n\nVector{Matrix{Float64}}: Vector of interaction matrices, one per DataFrame row. Each matrix is strains × strains with diagonal elements = 1.0.\n\nDetails\n\nDiagonal elements are always 1.0 (self-interaction)\nFor priority_effects = true: Off-diagonal elements are independently sampled\nFor priority_effects = false: Matrix is symmetric (M[i,j] = M[j,i])\n\nExamples\n\nusing DataFrames\n\n# Create parameter DataFrame\ndf = DataFrame(\n\tinteraction_strength = [0.1, 0.2],\n\tcf_ratio = [0.3, 0.7],\n\tpriority_effects = [true, false],\n\tstrains = [3, 4]\n)\n\n# Generate interaction matrices\nmatrices = prep_interaction_matrix(df)\n\n\n\n\n\nprep_interaction_matrix(strains::Int, priority_effects::Bool, interaction_strength::Float64; cf_ratio::Float64=1.0)\n\nGenerates a single interaction matrix with specified parameters. Interactions are sampled from a    uniform distribution, whose bounds are defined by the ratio of competition to facilitation in the pathogen community,   and the interaction strength.\n\nArguments\n\nstrains::Int: Number of strains (matrix size will be strains × strains)\npriority_effects::Bool: When true, the interaction matrix is asymmetric (priority effects). When false, the matrix is symmetric (no priority effects).\ninteraction_strength::Float64: Defines the outer bounds of the interaction multipliers. For example, an interaction strength of 0.1 means that the interaction multipliers will be sampled from a uniform distribution between 0.9 and 1.1. Interaction strength must be between 0 and 1.\ncf_ratio::Float64: Defines the ratio of facilitation to competition in the interaction matrix. A ratio less than 0.5 means that the matrix will have more competitive interactions, while a ratio greater than 0.5 means that the matrix will have more facilitative interactions. The ratio must be between 0 and 1. The default is 0.5.\n\nReturns\n\nMatrix{Float64}: An interaction matrix of size strains × strains\n\nExamples\n\n# Create symmetric 3x3 matrix\nmatrix = prep_interaction_matrix(3, \"symmetric\", 0.5)\n\n# Create asymmetric 2x2 matrix with custom competition/facilitation ratio\nmatrix = prep_interaction_matrix(2, \"asymmetric\", 0.3, cf_ratio=0.8)\n\n\n\n\n\n","category":"function"},{"location":"api/#Utility-Functions","page":"API Reference","title":"Utility Functions","text":"","category":"section"},{"location":"api/#CoinfectionSimulator.infect","page":"API Reference","title":"CoinfectionSimulator.infect","text":"infect(susceptibles, infecteds, interactions, beta, strain)\n\nCore infection function that determines which susceptible individuals become infected based on transmission probability and strain interactions.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.handle_si_disease","page":"API Reference","title":"CoinfectionSimulator.handle_si_disease","text":"handle_si_disease(current_pop, alive, strain, transmission, interactions, base_mortality, disease_mortality, dead_indices)\n\nHandle SI (Susceptible-Infected) disease dynamics for a single strain.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.handle_sir_disease","page":"API Reference","title":"CoinfectionSimulator.handle_sir_disease","text":"handle_sir_disease(current_pop, alive, strain, transmission, interactions, base_mortality, disease_mortality, recovery, dead_indices)\n\nHandle SIR (Susceptible-Infected-Recovered) disease dynamics for a single strain.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.handle_seir_disease","page":"API Reference","title":"CoinfectionSimulator.handle_seir_disease","text":"handle_seir_disease(current_pop, alive, strain, transmission, interactions, base_mortality, disease_mortality, recovery, latency, dead_indices)\n\nHandle SEIR (Susceptible-Exposed-Infected-Recovered) disease dynamics for a single strain.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.handle_seirs_disease","page":"API Reference","title":"CoinfectionSimulator.handle_seirs_disease","text":"handle_seirs_disease(current_pop, alive, strain, transmission, interactions, base_mortality, disease_mortality, recovery, latency, immunity_loss, dead_indices)\n\nHandle SEIRS (Susceptible-Exposed-Infected-Recovered-Susceptible) disease dynamics for a single strain.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.handle_infection","page":"API Reference","title":"CoinfectionSimulator.handle_infection","text":"handle_infection(current_pop, alive, strain, transmission, interactions)\n\nHandle the infection process for susceptible individuals.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.handle_exposure","page":"API Reference","title":"CoinfectionSimulator.handle_exposure","text":"handle_exposure(current_pop, alive, strain, transmission, interactions)\n\nHandle the exposure process for susceptible individuals in SEIR models.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.handle_exposed_infection","page":"API Reference","title":"CoinfectionSimulator.handle_exposed_infection","text":"handle_exposed_infection(current_pop, alive, strain, latency)\n\nHandle the transition from exposed to infected state.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.handle_recovery","page":"API Reference","title":"CoinfectionSimulator.handle_recovery","text":"handle_recovery(current_pop, alive, strain, recovery)\n\nHandle recovery from infected to recovered state.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.handle_immunity_loss","page":"API Reference","title":"CoinfectionSimulator.handle_immunity_loss","text":"handle_immunity_loss(current_pop, alive, strain, immunity_loss)\n\nHandle loss of immunity (transition from recovered to susceptible).\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.handle_infected_death","page":"API Reference","title":"CoinfectionSimulator.handle_infected_death","text":"handle_infected_death(current_pop, strain, base_mortality, disease_mortality, dead_indices)\n\nHandle mortality of infected individuals.\n\n\n\n\n\n","category":"function"},{"location":"api/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Basic-Single-Strain-Simulation","page":"Examples","title":"Basic Single-Strain Simulation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CoinfectionSimulator\nusing Random\n\nRandom.seed!(42)\n\n# Single strain, SI model\ninitial_pop = [Bool[1 0 0 0] for _ in 1:50]  # 50 individuals, all susceptible\ninitial_pop[1] = Bool[0 0 1 0]  # First individual infected\n\nresult = coinfection_simulator(\n    initial_pop=initial_pop,\n    ages=rand(1:30, 50),\n    interactions=reshape([1.0], 1, 1),\n    disease_type=[\"SI\"],\n    base_mortality=0.01,\n    disease_mortality=[0.05],\n    fecundity=0.1,\n    transmission=[0.3],\n    time_steps=20,\n    age_maturity=5\n)\n\npopulations, ages = result\nprintln(\"Final population size: \", length(populations[end]))","category":"page"},{"location":"examples/#Multi-Strain-Coinfection","page":"Examples","title":"Multi-Strain Coinfection","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CoinfectionSimulator\n\n# Two competing strains\nn_individuals = 100\ninitial_pop = [Bool[1 0 0 0; 1 0 0 0] for _ in 1:n_individuals]\n\n# Introduce both strains\ninitial_pop[1] = Bool[0 0 1 0; 1 0 0 0]  # Individual 1: strain 1 infected\ninitial_pop[2] = Bool[1 0 0 0; 0 0 1 0]  # Individual 2: strain 2 infected\n\n# Competitive interaction matrix\ninteractions = [1.0 0.7; 0.7 1.0]  # Mutual inhibition\n\nresult = coinfection_simulator(\n    initial_pop=initial_pop,\n    ages=rand(1:50, n_individuals),\n    interactions=interactions,\n    disease_type=[\"SIR\", \"SIR\"],\n    base_mortality=0.01,\n    disease_mortality=[0.03, 0.03],\n    fecundity=0.15,\n    transmission=[0.4, 0.4],\n    time_steps=100,\n    age_maturity=10,\n    recovery=[0.1, 0.1]\n)","category":"page"},{"location":"examples/#Virtual-Ecologist-Sampling","page":"Examples","title":"Virtual Ecologist Sampling","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Using results from previous simulation\nsampled_data = virtual_ecologist_sample(\n    virtual_population=result[1],\n    proportion_sampled=0.3,\n    false_positive_rate=0.05,\n    false_negative_rate=0.15\n)\n\nprintln(\"Detection matrix dimensions: \", size(sampled_data))\nprintln(\"Total detections: \", sum(sampled_data))","category":"page"},{"location":"examples/#Parameter-Study-Setup","page":"Examples","title":"Parameter Study Setup","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using DataFrames\n\n# Create parameter space\ndf = DataFrame(\n    interaction_strength = [0.1, 0.2, 0.3],\n    cf_ratio = [0.8, 1.0, 1.2],\n    priority_effects = [true, false, true],\n    strains = [2, 3, 2]\n)\n\n# Generate interaction matrices\nmatrices = prep_interaction_matrix(df)\n\nfor (i, matrix) in enumerate(matrices)\n    println(\"Matrix $i:\")\n    display(matrix)\n    println()\nend","category":"page"},{"location":"#CoinfectionSimulator.jl","page":"Home","title":"CoinfectionSimulator.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CoinfectionSimulator.jl.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CoinfectionSimulator.jl is a Julia package for simulating multi-strain coinfection dynamics in host populations with imperfect ecological sampling.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Multi-strain epidemiological models: Supports SI, SIR, SEIR, and SEIRS disease models\nCoinfection dynamics: Models strain interactions (competition, facilitation, priority effects)\nPopulation dynamics: Includes birth, death, and aging processes\nVirtual ecologist sampling: Simulates imperfect ecological surveys with false positives/negatives\nFlexible parameterization: Easy setup of interaction matrices and simulation parameters","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/japilo/CoinfectionSimulator.jl\")","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using CoinfectionSimulator\n\n# Create interaction matrix\ninteractions = prep_interaction_matrix(3, \"symmetric\", 0.2)\n\n# Set up initial population\ninitial_pop = [Bool[1 0 0 0; 1 0 0 0; 1 0 0 0] for _ in 1:100]\n\n# Run simulation\nresult = coinfection_simulator(\n    initial_pop=initial_pop,\n    ages=rand(1:50, 100),\n    interactions=interactions,\n    disease_type=[\"SEIR\", \"SEIR\", \"SEIR\"],\n    base_mortality=0.01,\n    disease_mortality=[0.02, 0.02, 0.02],\n    fecundity=0.1,\n    transmission=[0.3, 0.3, 0.3],\n    time_steps=50,\n    age_maturity=18,\n    latency=[2, 2, 2],\n    recovery=[0.1, 0.1, 0.1]\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
