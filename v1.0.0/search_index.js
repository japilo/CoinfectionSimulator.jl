var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Disease-Model-Types","page":"API Reference","title":"Disease Model Types","text":"","category":"section"},{"location":"api/#CoinfectionSimulator.DiseaseModel","page":"API Reference","title":"CoinfectionSimulator.DiseaseModel","text":"DiseaseModel\n\nAbstract supertype for all disease models in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"api/#CoinfectionSimulator.SIModel","page":"API Reference","title":"CoinfectionSimulator.SIModel","text":"SIModel <: DiseaseModel\n\nSusceptible-Infected (SI) disease model.\n\nFields\n\ntransmission::Float64: Transmission probability\nmortality::Float64: Additional mortality rate due to infection\n\n\n\n\n\n","category":"type"},{"location":"api/#CoinfectionSimulator.SIRModel","page":"API Reference","title":"CoinfectionSimulator.SIRModel","text":"SIRModel <: DiseaseModel\n\nSusceptible-Infected-Recovered (SIR) disease model.\n\nFields\n\ntransmission::Float64: Transmission probability\nmortality::Float64: Additional mortality rate due to infection\nrecovery::Float64: Recovery probability\n\n\n\n\n\n","category":"type"},{"location":"api/#CoinfectionSimulator.SEIRModel","page":"API Reference","title":"CoinfectionSimulator.SEIRModel","text":"SEIRModel <: DiseaseModel\n\nSusceptible-Exposed-Infected-Recovered (SEIR) disease model.\n\nFields\n\ntransmission::Float64: Transmission probability\nmortality::Float64: Additional mortality rate due to infection\nrecovery::Float64: Recovery probability\nlatency::Int: Number of time steps in exposed state\n\n\n\n\n\n","category":"type"},{"location":"api/#CoinfectionSimulator.SEIRSModel","page":"API Reference","title":"CoinfectionSimulator.SEIRSModel","text":"SEIRSModel <: DiseaseModel\n\nSusceptible-Exposed-Infected-Recovered-Susceptible (SEIRS) disease model.\n\nFields\n\ntransmission::Float64: Transmission probability\nmortality::Float64: Additional mortality rate due to infection\nrecovery::Float64: Recovery probability\nlatency::Int: Number of time steps in exposed state\nimmunity_loss::Float64: Probability of losing immunity\n\n\n\n\n\n","category":"type"},{"location":"api/#Population-Types","page":"API Reference","title":"Population Types","text":"","category":"section"},{"location":"api/#CoinfectionSimulator.Individual","page":"API Reference","title":"CoinfectionSimulator.Individual","text":"Individual\n\nRepresents a single individual in the population. New individuals can be constructed using the Individual constructor and specifying the number of strains and the age. These new individuals are initialized as susceptible to all strains, but can be modified to other states.\n\nFields\n\nstate::Matrix{Bool}: Disease states matrix with rows for each strain and columns for [S,E,I,R]\nage::Int: Age of the individual\n\n\n\n\n\n","category":"type"},{"location":"api/#CoinfectionSimulator.Population","page":"API Reference","title":"CoinfectionSimulator.Population","text":"Population\n\nRepresents the entire population in the simulation.\n\nFields\n\nindividuals::Vector{Individual}: Collection of individuals\n\n\n\n\n\n","category":"type"},{"location":"api/#Parameter-Types","page":"API Reference","title":"Parameter Types","text":"","category":"section"},{"location":"api/#CoinfectionSimulator.SimulationParameters","page":"API Reference","title":"CoinfectionSimulator.SimulationParameters","text":"SimulationParameters\n\nParameters for a coinfection simulation.\n\nFields\n\nmodels::Vector{<:DiseaseModel}: Disease models for each strain\ninteractions::Matrix{Float64}: Strain interaction matrix\nbase_mortality::Float64: Background mortality rate\nfecundity::Float64: Mean number of offspring per mature individual\nage_maturity::Int: Age at which individuals can reproduce\nintroduction::Symbol: How strains are introduced (:simultaneous, :random, or :none)\ntime_steps::Int: Number of time steps to simulate\ntransmission_type::Symbol: Type of transmission (:frequency (default), or :density)\n\n\n\n\n\n","category":"type"},{"location":"api/#CoinfectionSimulator.SamplingParameters","page":"API Reference","title":"CoinfectionSimulator.SamplingParameters","text":"SamplingParameters\n\nParameters for virtual ecologist sampling.\n\nFields\n\nproportion_sampled::Float64: Proportion of the population sampled\nfalse_positive_rate::Float64: Probability of false positive detection\nfalse_negative_rate::Float64: Probability of false negative detection\n\n\n\n\n\n","category":"type"},{"location":"api/#Main-Functions","page":"API Reference","title":"Main Functions","text":"","category":"section"},{"location":"api/#CoinfectionSimulator.simulate","page":"API Reference","title":"CoinfectionSimulator.simulate","text":"simulate(initial_population::Population, params::SimulationParameters) -> Vector{Population}\n\nSimulates multiple pathogen strains spreading through a host population with coinfection dynamics among the strains. Supports both density-dependent and frequency-dependent transmission.\n\nArguments\n\ninitial_population::Population: Initial population of individuals\nparams::SimulationParameters: Parameters for the simulation. The fields are:\nmodels::Vector{<:DiseaseModel}: Disease models for each strain\ninteractions::Matrix{Float64}: Strain interaction matrix\nbase_mortality::Float64: Background mortality rate\nfecundity::Float64: Mean number of offspring per mature individual\nage_maturity::Int: Age (in time steps) at which individuals can reproduce\nintroduction::Symbol: How strains are introduced (:simultaneous, :random, or :none)\ntime_steps::Int: Number of time steps to simulate\ntransmission_type::Symbol: Type of transmission (:density or :frequency, defaults to :frequency)\n\nReturns\n\nVector of population states at each time step (Vector{Population})\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.sample_populations","page":"API Reference","title":"CoinfectionSimulator.sample_populations","text":"sample_populations(populations::Vector{Population}, params::SamplingParameters) -> Matrix{Bool}\n\nSample a series of populations using a virtual ecologist with imperfect detection capabilities.\n\nArguments\n\npopulations::Vector{Population}: Population data across time steps.\nparams::SamplingParameters: Parameters controlling the sampling process. The fields are:\nproportion_sampled::Float64: Proportion of the population sampled\nfalse_positive_rate::Float64: Probability of false positive detection\nfalse_negative_rate::Float64: Probability of false negative detection\n\nReturns\n\nMatrix{Bool}: Detection matrix with dimensions (ntimesteps, nstrains). Each element indicates whether a strain was detected at that time step.\n\nExamples\n\n# Create sample population where all individuals are infected with all strains\npop = Population([Individual(BitMatrix([false false true false]), 20) for _ in 1:100])\n\n# Sample with 50% sampling rate and 10% error rates\ndetections = sample_populations(\n    pop,\n    SamplingParameters(0.5, 0.1, 0.1)\n)\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.create_interaction_matrix","page":"API Reference","title":"CoinfectionSimulator.create_interaction_matrix","text":"createinteractionmatrix(strains::Int,   priorityeffects::Bool,   interactionstrength::Float64;   cf_ratio::Float64=0.5) -> Matrix{Float64}\n\nGenerates a single interaction matrix with specified parameters. Interactions are sampled from a   uniform distribution, whose bounds are defined by the ratio of competition to facilitation in the pathogen community,   and the interaction strength.\n\nArguments\n\nstrains::Int: Number of strains (matrix size will be strains × strains)\npriority_effects::Bool: When true, the interaction matrix is asymmetric (priority effects). When false, the matrix is symmetric (no priority effects).\ninteraction_strength::Float64: Defines the outer bounds of the interaction multipliers. For example, an interaction strength of 0.1 means that the interaction multipliers will be sampled from a uniform distribution between 0.9 and 1.1. Interaction strength must be between 0 and 1. If interaction strength is 0, all interactions will be set to neutral (1.0) regardless of the cf_ratio.\ncf_ratio::Float64: Defines the ratio of facilitation to competition in the interaction matrix. A ratio less than 0.5 means that the matrix will have more competitive interactions, while a ratio greater than 0.5 means that the matrix will have more facilitative interactions. The ratio must be between 0 and 1. The default is 0.5.\n\nReturns\n\nMatrix{Float64}: An interaction matrix of size strains × strains\n\nExamples\n\n# Create symmetric 3x3 matrix\nmatrix = prep_interaction_matrix(3, \"symmetric\", 0.5)\n\n# Create asymmetric 2x2 matrix with custom competition/facilitation ratio\nmatrix = create_interaction_matrix(2, \"asymmetric\", 0.3, cf_ratio=0.8)\n\n\n\n\n\ncreateinteractionmatrix(df::DataFrame) -> Vector{Matrix{Float64}}\n\nGenerates interaction matrices for coinfection simulations based on DataFrame parameters. Interactions are sampled from a uniform distribution, whose bounds are defined by the ratio of competition to facilitation in the pathogen community, and the interaction strength.\n\nArguments\n\ndf::DataFrame: DataFrame containing the following required columns:\n:interaction_strength (Float64): Defines the outer bounds of the interaction multipliers. For example, an interaction strength of 0.1 means that the interaction multipliers will be sampled from a uniform distribution between 0.9 and 1.1. Interaction strength must be between 0 and 1. If interaction strength is 0, all interactions will be set to neutral (1.0) regardless of the cf_ratio.\n:cf_ratio (Float64): Defines the ratio of facilitation to competition in the interaction matrix. A ratio less than 0.5 means that the matrix will have more competitive interactions, while a ratio greater than 0.5 means that the matrix will have more facilitative interactions. The ratio must be between 0 and 1.\n:priority_effects (Bool): When true, the interaction matrix is asymmetric (priority effects). When false, the matrix is symmetric (no priority effects).\n:strains (Int): Number of strains in the pathogen community (determines interaction matrix dimensions).\n\nReturns\n\nVector{Matrix{Float64}}: Vector of interaction matrices, one per DataFrame row. Each matrix is strains × strains with diagonal elements = 1.0.\n\nExamples\n\nusing DataFrames\n\n# Create parameter DataFrame\ndf = DataFrame(\ninteraction_strength = [0.1, 0.2],\ncf_ratio = [0.3, 0.7],\npriority_effects = [true, false],\nstrains = [3, 4]\n)\n\n# Generate interaction matrices\nmatrices = create_interaction_matrix(df)\n\n\n\n\n\n","category":"function"},{"location":"api/#Helper-Functions","page":"API Reference","title":"Helper Functions","text":"","category":"section"},{"location":"api/#CoinfectionSimulator.age_population!","page":"API Reference","title":"CoinfectionSimulator.age_population!","text":"age_population!(population::Population)\n\nAge all individuals in the population by one time step in-place.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.apply_base_mortality!","page":"API Reference","title":"CoinfectionSimulator.apply_base_mortality!","text":"apply_base_mortality!(population::Population, alive::Vector{Bool}, base_mortality::Float64, mortality_list::Set{Int})\n\nApply background mortality to all living individuals once per time step.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.breeding!","page":"API Reference","title":"CoinfectionSimulator.breeding!","text":"breeding!(population::Population, fecundity::Float64, maturity_age::Int)\n\nHandle reproduction of mature individuals in the population. All individuals at or greater than the age of maturity are able to produce offspring. New individuals are generated via a Poisson distribution and added to the population as susceptibles.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.copy_individual","page":"API Reference","title":"CoinfectionSimulator.copy_individual","text":"copy_individual(ind::Individual) -> Individual\n\nCreate an efficient copy of an individual, optimized for BitMatrix copying.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.copy_population","page":"API Reference","title":"CoinfectionSimulator.copy_population","text":"copy_population(pop::Population) -> Population\n\nCreate an efficient copy of a population optimized for BitMatrix copying.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.introduce_infections!","page":"API Reference","title":"CoinfectionSimulator.introduce_infections!","text":"introduce_infections!(population::Population, timestep::Int, intro_schedule::Vector{Int})\n\nIntroduce infections into the population according to the introduction schedule. Individuals are randomly chosen and their state is changed from susceptible to infected.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.process_disease_mortality!","page":"API Reference","title":"CoinfectionSimulator.process_disease_mortality!","text":"process_disease_mortality!(population::Population, alive::Vector{Bool}, strain::Int,\n                          disease_mortality::Float64, mortality_list::Set{Int})\n\nProcess additional mortality due to infection.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.process_disease_dynamics!","page":"API Reference","title":"CoinfectionSimulator.process_disease_dynamics!","text":"process_disease_dynamics!(population::Population, params::SimulationParameters, mortality_list::Set{Int})\n\nProcess all disease dynamics for one time step. This function applies base mortality to all individuals, checks which strains are active in the population, and handles disease dynamics for those strains.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.process_strain!","page":"API Reference","title":"CoinfectionSimulator.process_strain!","text":"process_strain!(population::Population, alive::Vector{Bool}, strain::Int,\n               model::DiseaseModel, interactions::Vector{Float64}, mortality_list::Set{Int})\n\nProcess disease dynamics for a specific strain based on its disease model. This function uses multiple dispatch to apply the appropriate disease processes to each model.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.process_exposures!","page":"API Reference","title":"CoinfectionSimulator.process_exposures!","text":"process_exposures!(population::Population, alive::Vector{Bool}, strain::Int,\n                  transmission_rate::Float64, interactions::Vector{Float64}, transmission_type::Symbol)\n\nProcess exposures for SEIR/SEIRS models (susceptible to exposed). If a potential new host is infected with another strain, interactions between strains affect the infection pressure.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.process_infections!","page":"API Reference","title":"CoinfectionSimulator.process_infections!","text":"process_infections!(population::Population, alive::Vector{Bool}, strain::Int,\n                   transmission_rate::Float64, interactions::Vector{Float64}, transmission_type::Symbol)\n\nProcess direct infections for SI/SIR models (susceptible to infected, with no latent period). Interactions with other strains in potential new hosts affect the transmission rate.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.process_recovery!","page":"API Reference","title":"CoinfectionSimulator.process_recovery!","text":"process_recovery!(population::Population, alive::Vector{Bool}, strain::Int, recovery_rate::Float64)\n\nProcess recovery from infection.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.process_latent_infections!","page":"API Reference","title":"CoinfectionSimulator.process_latent_infections!","text":"process_latent_infections!(population::Population, alive::Vector{Bool}, strain::Int, latency::Int)\n\nProcess transitions from exposed to infected with a probability of 1/latency.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.process_immunity_loss!","page":"API Reference","title":"CoinfectionSimulator.process_immunity_loss!","text":"process_immunity_loss!(population::Population, alive::Vector{Bool}, strain::Int, immunity_loss_rate::Float64)\n\nProcess loss of immunity after recovery.\n\n\n\n\n\n","category":"function"},{"location":"api/#CoinfectionSimulator.remove_dead_individuals!","page":"API Reference","title":"CoinfectionSimulator.remove_dead_individuals!","text":"remove_dead_individuals!(population::Population, mortality_list::Set{Int}, alive_indices::Vector{Int})\n\nRemove dead individuals from population efficiently using pre-allocated temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"api/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This section provides detailed examples based on the current example files in the CoinfectionSimulator.jl package.","category":"page"},{"location":"examples/#Basic-Example:-Two-Strain-Coinfection","page":"Examples","title":"Basic Example: Two-Strain Coinfection","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example demonstrates the core functionality of CoinfectionSimulator.jl, showing how to set up and run a basic two-strain coinfection simulation with slight competition between the strains.","category":"page"},{"location":"examples/#Biological-Context","page":"Examples","title":"Biological Context","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This simulation models two co-circulating strains that compete for hosts. The competition could result from:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Cross-reactive immune responses between related pathogens\nResource competition within infected hosts\nBehavioral changes to the host that affect transmission patterns","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CoinfectionSimulator\nusing Random\nusing Plots\nRandom.seed!(42)\n\n# Define Disease Models\n# Strain 1: More aggressive pathogen\n# Higher transmission but also higher mortality\nstrain1_model = SIRModel(\n    0.15,    # transmission rate: 15% chance per infected contact per time step\n    0.005,   # disease-induced mortality: 0.5% death rate for infected individuals\n    0.1,     # recovery rate: average infectious period = 1/0.1 = 10 time steps\n)\n\n# Strain 2: Milder but persistent pathogen\n# Lower transmission and mortality but longer infectious period\nstrain2_model = SIRModel(\n    0.12,    # transmission rate: 12% per contact (slightly less transmissible)\n    0.003,   # disease-induced mortality: 0.3% death rate (less virulent)\n    0.08,    # recovery rate: average infectious period = 1/0.08 = 12.5 time steps\n)\n\ndisease_models = [strain1_model, strain2_model]\n\n# Create Interaction Matrix\n# Symmetric competition where each strain reduces the other's transmission by 10%\ninteractions = [1.0 0.9;   # Row 1: strain 2 reduces strain 1 transmission by 10%\n                0.9 1.0]   # Row 2: strain 1 reduces strain 2 transmission by 10%\n\n# Initialize Population\nn_individuals = 200\npopulation = Population(Individual[])\n\n# Create age-structured population\nfor i in 1:n_individuals\n    age = rand(1:80)  # Random age 1-80 time steps\n    individual = Individual(2, age)  # 2 strains, starts susceptible to both\n    push!(population.individuals, individual)\nend\n\n# Seed initial infections to start the epidemic\n# Strain 1 introduction (index cases)\nfor i in 1:5\n    population[i][1, 1] = false  # No longer susceptible to strain 1\n    population[i][1, 3] = true   # Now infected with strain 1\nend\n\n# Strain 2 introduction\npopulation[n_individuals][2, 1] = false  # No longer susceptible to strain 2\npopulation[n_individuals][2, 3] = true   # Now infected with strain 2\n\n# Set Simulation Parameters\nparams = SimulationParameters(\n    disease_models,           # Our SIR models (one per strain)\n    interactions,            # Strain interactions\n    0.001,                   # Base mortality rate\n    0.02,                    # Fecundity (birth rate)\n    30,                      # Age of maturity\n    :none,                   # No additional introductions of strains\n    150,                     # Number of time steps\n    :frequency               # Transmission type (:frequency or :density)\n)\n\n# Run Simulation\npopulations = simulate(population, params)\n\n# Analyze Results\nn_timesteps = length(populations)\n\n# Track disease states over time\nsusceptible_1 = zeros(Int, n_timesteps)\ninfected_1 = zeros(Int, n_timesteps)\nrecovered_1 = zeros(Int, n_timesteps)\n\nsusceptible_2 = zeros(Int, n_timesteps)\ninfected_2 = zeros(Int, n_timesteps)\nrecovered_2 = zeros(Int, n_timesteps)\n\ncoinfected = zeros(Int, n_timesteps)\ntotal_pop = zeros(Int, n_timesteps)\n\nfor t in 1:n_timesteps\n    pop = populations[t]\n    total_pop[t] = length(pop)\n\n    for i in 1:length(pop.individuals)\n        individual = pop.individuals[i]\n        # Strain 1 states\n        if individual[1, 1]\n            susceptible_1[t] += 1\n        end\n        if individual[1, 3]\n            infected_1[t] += 1\n        end\n        if individual[1, 4]\n            recovered_1[t] += 1\n        end\n\n        # Strain 2 states\n        if individual[2, 1]\n            susceptible_2[t] += 1\n        end\n        if individual[2, 3]\n            infected_2[t] += 1\n        end\n        if individual[2, 4]\n            recovered_2[t] += 1\n        end\n\n        # Coinfection (infected with both strains)\n        if individual[1, 3] && individual[2, 3]\n            coinfected[t] += 1\n        end\n    end\nend\n\n# Virtual Ecologist Sampling\nsampling_params = SamplingParameters(\n    0.1,    # Sample 10% of population\n    0.05,   # 5% false positive rate\n    0.1,    # 10% false negative rate\n)\n\ndetection_results = sample_populations(populations, sampling_params)","category":"page"},{"location":"examples/#Parameter-Exploration:-Batch-Simulations-and-Sensitivity-Analysis","page":"Examples","title":"Parameter Exploration: Batch Simulations and Sensitivity Analysis","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example demonstrates how to explore parameter space systematically using CoinfectionSimulator.jl, including batch simulation runs with different parameters and sensitivity analysis for key parameters.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CoinfectionSimulator\nusing Random\nusing DataFrames\nusing Statistics\nRandom.seed!(42)\n\n# Define Base Scenario\nbase_sir = SIRModel(0.15, 0.005, 0.1)  # transmission, mortality, recovery\nbase_models = [base_sir, base_sir]  # Two identical strains\n\nfunction create_base_population(n_individuals=100, seed_infections=3)\n    population = Population(Individual[])\n\n    for i in 1:n_individuals\n        age = rand(0:100)\n        individual = Individual(2, age)\n        push!(population.individuals, individual)\n    end\n\n    # Seed infections\n    for i in 1:seed_infections\n        population[i][1, 1] = false\n        population[i][1, 3] = true\n    end\n\n    return population\nend\n\n# Transmission Rate Sensitivity Analysis\ntransmission_rates = 0.001:0.001:0.05  # Range from 0.1% probability to 5%\ntransmission_results = DataFrame(\n    TransmissionRate=Float64[],\n    PeakInfections=Int[],\n    FinalRecovered=Int[],\n    AttackRate=Float64[],\n    EpidemicDuration=Int[]\n)\n\nfor (i, rate) in enumerate(transmission_rates)\n    # Create models with varying transmission rate\n    model = SIRModel(rate, 0.005, 0.1)\n    models = [model, model]\n\n    # Neutral interactions\n    interactions = [1.0 1.0; 1.0 1.0]\n\n    params = SimulationParameters(\n        models, interactions, 0.001, 0.01, 18, :none, 100\n    )\n\n    population = create_base_population()\n    results = simulate(population, params)\n\n    # Analyze results\n    populations = results\n    infected_counts = [sum(ind[1, 3] for ind in pop.individuals) for pop in populations]\n    recovered_counts = [sum(ind[1, 4] for ind in pop.individuals) for pop in populations]\n\n    peak_infections = maximum(infected_counts)\n    final_recovered = recovered_counts[end]\n    attack_rate = final_recovered / 100.0 * 100  # percentage\n\n    # Find epidemic duration (time until <1% infected)\n    epidemic_end = findfirst(infected_counts .< 1)\n    epidemic_duration = epidemic_end === nothing ? 100 : epidemic_end\n\n    push!(transmission_results, (rate, peak_infections, final_recovered, attack_rate, epidemic_duration))\nend\n\n# Interaction Exploration\ninteraction_strengths = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ncf_ratios = [0.1, 0.3, 0.5, 0.7, 0.9]  # Competition vs Facilitation ratios\n\ninteraction_results = DataFrame(\n    InteractionStrength=Float64[],\n    CFRatio=Float64[],\n    Strain1Peak=Int[],\n    Strain2Peak=Int[],\n    Coinfections=Int[],\n    InteractionType=String[]\n)\n\nfor strength in interaction_strengths\n    for cf_ratio in cf_ratios\n        # Create interaction matrix\n        if strength == 0.0\n            interactions = [1.0 1.0; 1.0 1.0]\n        else\n            interactions = create_interaction_matrix(2, false, strength, cf_ratio=cf_ratio)\n        end\n\n        models = [base_sir, base_sir]\n        params = SimulationParameters(models, interactions, 0.001, 0.01, 18, :none, 100)\n\n        # Create population with both strains present\n        population = create_base_population()\n        population.individuals[end][2, 1] = false  # Add strain 2 seed\n        population.individuals[end][2, 3] = true\n\n        results = simulate(population, params)\n        populations = results\n\n        # Count peaks and coinfections\n        strain1_counts = [sum(ind[1, 3] for ind in pop.individuals) for pop in populations]\n        strain2_counts = [sum(ind[2, 3] for ind in pop.individuals) for pop in populations]\n        coinfection_counts = [sum(ind[1, 3] && ind[2, 3] for ind in pop.individuals) for pop in populations]\n\n        strain1_peak = maximum(strain1_counts)\n        strain2_peak = maximum(strain2_counts)\n        max_coinfections = maximum(coinfection_counts)\n\n        # Classify interaction type\n        interaction_type = if strength == 0.0\n            \"None\"\n        elseif cf_ratio < 0.5\n            \"Competition\"\n        elseif cf_ratio > 0.5\n            \"Facilitation\"\n        else\n            \"Mixed\"\n        end\n\n        push!(interaction_results, (strength, cf_ratio, strain1_peak, strain2_peak, max_coinfections, interaction_type))\n    end\nend","category":"page"},{"location":"examples/#Wildlife-Disease-Ecology:-Multiple-Infections-in-Animal-Populations","page":"Examples","title":"Wildlife Disease Ecology: Multiple Infections in Animal Populations","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example demonstrates CoinfectionSimulator.jl for wildlife disease ecology research with directly transmitted parasites and pathogens.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CoinfectionSimulator\nusing Random\nusing DataFrames\nusing Statistics\nRandom.seed!(2025)\n\n# Define Parasite Models for Wildlife Host\n# Strain 1: Acute viral infection\nacute_virus = SIRModel(\n    0.08,    # Transmission rate per contact per month\n    0.012,   # Disease-induced mortality\n    0.25     # Recovery rate (4 month average infectious period)\n)\n\n# Strain 2: Chronic bacterial infection\nchronic_bacteria = SIModel(\n    0.05,    # Lower transmission rate\n    0.008    # Lower mortality but persistent\n)\n\n# Strain 3: Parasitic worm with prepatent period\nintestinal_parasite = SEIRModel(\n    0.06,    # Moderate transmission\n    0.005,   # Low mortality\n    0.15,    # Recovery/clearance rate\n    6        # Prepatent period (6 months before infectious)\n)\n\n# Strain 4: Ectoparasite\nectoparasite = SEIRSModel(\n    0.10,    # High transmission\n    0.003,   # Very low mortality\n    0.20,    # Recovery rate\n    2,       # Short latency\n    0.08     # Loss of immunity/resistance\n)\n\ndisease_models = [acute_virus, chronic_bacteria, intestinal_parasite, ectoparasite]\n\n# Define Strain Interactions Based on Biological Mechanisms\ninteractions = [\n    1.0 0.7 1.2 0.9;    # Acute virus: competes with bacteria, facilitates internal parasite\n    1.3 1.0 1.1 1.0;    # Chronic bacteria: facilitates others (immunosuppression)\n    0.8 0.9 1.0 1.1;    # Intestinal parasite: some competition, slight facilitation of ectoparasite\n    1.1 1.0 0.9 1.0     # Ectoparasite: facilitates virus, competes with intestinal parasite\n]\n\n# Initialize Wildlife Population\nfunction create_wildlife_population(n_animals=300)\n    population = Population(Individual[])\n\n    # Age structure typical of wildlife populations\n    for i in 1:n_animals\n        # Age in time steps (represents months)\n        age = if rand() < 0.45\n            rand(0:6)       # 45% juveniles (0-6 months)\n        elseif rand() < 0.35\n            rand(7:18)      # 35% young adults (7-18 months)\n        elseif rand() < 0.15\n            rand(19:36)     # 15% mature adults (19-36 months)\n        else\n            rand(37:60)     # 5% old animals (3-5 years)\n        end\n\n        individual = Individual(4, age)  # 4 strains\n        push!(population.individuals, individual)\n    end\n\n    return population\nend\n\nwildlife_population = create_wildlife_population(300)\n\n# Introduce infections\n# Chronic bacteria most common\nchronic_initial = 8\nfor i in 1:chronic_initial\n    wildlife_population.individuals[i].state[2, 1] = false\n    wildlife_population.individuals[i].state[2, 3] = true\nend\n\n# Acute virus (recent outbreak)\nvirus_initial = 3\nfor i in (chronic_initial+1):(chronic_initial+virus_initial)\n    wildlife_population.individuals[i].state[1, 1] = false\n    wildlife_population.individuals[i].state[1, 3] = true\nend\n\n# Run Multi-Season Simulation\nparams = SimulationParameters(\n    disease_models,\n    interactions,\n    0.008,   # Base mortality (predation, accidents, etc.)\n    0.05,    # Fecundity (birth rate)\n    6,       # Reproductive maturity at 6 months\n    :random, # Random introductions (migration, spillover events)\n    24       # 2 years of monthly time steps\n)\n\npopulations = simulate(wildlife_population, params)\n\n# Wildlife Sampling Simulation\nsampling_strategies = [\n    (\"Capture-Mark-Recapture\", 0.15, 0.02, 0.08),  # 15% sampled, low errors\n    (\"Hunter Harvest\", 0.08, 0.05, 0.12),          # 8% sampled, moderate errors\n    (\"Mortality Surveillance\", 0.03, 0.10, 0.20)    # 3% sampled, high errors\n]\n\nsurveillance_results = DataFrame(\n    Strategy=String[],\n    Strain=String[],\n    TruePositiveMonths=Int[],\n    DetectedMonths=Int[],\n    SensitivityPercent=Float64[]\n)\n\nstrain_names = [\"Acute Virus\", \"Chronic Bacteria\", \"Intestinal Parasite\", \"Ectoparasite\"]\n\nfor (strategy_name, prop_sampled, fp_rate, fn_rate) in sampling_strategies\n    sampling_params = SamplingParameters(prop_sampled, fp_rate, fn_rate)\n    detection_matrix = sample_populations(populations, sampling_params)\n\n    for strain in 1:4\n        # Calculate detection metrics\n        infected_counts = [sum(ind[strain, 3] for ind in pop.individuals) for pop in populations]\n        total_animals = [length(pop) for pop in populations]\n        true_positive_months = sum((infected_counts ./ total_animals) .> 0)\n        detected_months = sum(detection_matrix[:, strain])\n        sensitivity = detected_months / max(1, true_positive_months) * 100\n\n        push!(surveillance_results, (strategy_name, strain_names[strain],\n            true_positive_months, detected_months, sensitivity))\n    end\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"These examples demonstrate the key functionality of CoinfectionSimulator.jl for modeling complex multi-strain disease dynamics in various ecological contexts.","category":"page"},{"location":"#CoinfectionSimulator.jl","page":"Home","title":"CoinfectionSimulator.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CoinfectionSimulator.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Julia package for simulating multi-strain coinfection dynamics in host populations with imperfect ecological sampling.","category":"page"},{"location":"","page":"Home","title":"Home","text":"There are many ways to simulate compartmental disease models in Julia. What CoinfectionSimulator.jl brings to the table is community ecology interactions between pathogens that circulate in a host population. The simulator works off of the assumption that pathogens can affect the probability of other pathogens successfully infecting the host, either by facilitating or inhibiting their establishment. The user can specify all possible pairwise interactions between pathogens using an interaction matrix, which can include or exclude priority effects. In its current form, the simulator assumes density-dependent transmission.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Multi-strain epidemiological models: Supports SI, SIR, SEIR, and SEIRS disease models\nCoinfection dynamics: Models strain interactions (competition, facilitation, priority effects)\nPopulation dynamics: Includes birth, death, and aging processes\nVirtual ecologist sampling: Simulates imperfect ecological surveys with false positives/negatives\nFlexible parameterization: Easy setup of interaction matrices and simulation parameters","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/japilo/CoinfectionSimulator.jl\")","category":"page"},{"location":"#Performance","page":"Home","title":"Performance","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here are some performance benchmarks on a 2024 MacBook Pro with an M4 chip and 10 cores, using reasonable simulation parameters (similar base mortality and fecundity in the host population, low virulence strains):","category":"page"},{"location":"#Population-Size-(100-timesteps)","page":"Home","title":"Population Size (100 timesteps)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Population Size Time Memory\n100 0.85 ms 5.2 MB\n250 2.27 ms 13.5 MB\n500 5.15 ms 26.7 MB\n1000 18.83 ms 54.4 MB\n2000 41.06 ms 112.0 MB","category":"page"},{"location":"#Time-Steps-(500-individuals)","page":"Home","title":"Time Steps (500 individuals)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Time Steps Time Memory\n50 2.32 ms 11.6 MB\n100 4.60 ms 23.6 MB\n200 10.07 ms 45.5 MB\n300 23.48 ms 64.9 MB\n400 43.24 ms 100.2 MB\n500 46.70 ms 122.2 MB","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using CoinfectionSimulator\nusing Random\n\n# Set up initial population (100 individuals, 2 strains)\nn_individuals = 100\nn_strains = 2\n\n# Create disease models\nmodels = [SIModel(0.3, 0.02), SIModel(0.4, 0.02)]\n\n# Create initial population\npop = Population([Individual(BitMatrix([true false true false]), 20) for _ in 1:100])\n\n# Set up simulation parameters\nparams = SimulationParameters(\n    models,                  # Disease models\n    [1.0 0.8; 0.8 1.0],      # Interaction matrix\n    0.01,                    # Base mortality\n    0.1,                     # Fecundity\n    30,                      # Age of maturity\n    :simultaneous,           # Introduction type\n    50,                      # Time steps\n    :frequency               # Transmission type (:frequency or :density)\n)\n\n# Run simulation\npopulations, age_vectors = simulate(population, params)\n\n# Sample with virtual ecologist\nsampling_params = SamplingParameters(0.3, 0.05, 0.1)\ndetections = sample_populations(populations, sampling_params)\n\nprintln(\"Detected strains over time:\")\nprintln(size(detections))  # (time_steps, n_strains)","category":"page"},{"location":"#Main-Types-and-Functions","page":"Home","title":"Main Types and Functions","text":"","category":"section"},{"location":"#Types","page":"Home","title":"Types","text":"","category":"section"},{"location":"#Disease-Models","page":"Home","title":"Disease Models","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SIModel: Susceptible → Infected\nSIRModel: Susceptible → Infected → Recovered\nSEIRModel: Susceptible → Exposed → Infected → Recovered\nSEIRSModel: Susceptible → Exposed → Infected → Recovered → Susceptible","category":"page"},{"location":"#Core-Types","page":"Home","title":"Core Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Individual: Represents a single host with an age in days and disease states for multiple strains\nPopulation: Collection of individuals\nSimulationParameters: Configuration for a simulation run\nSamplingParameters: Configuration for virtual ecologist sampling","category":"page"},{"location":"#Primary-Functions","page":"Home","title":"Primary Functions","text":"","category":"section"},{"location":"#simulate","page":"Home","title":"simulate","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Simulates multi-strain coinfection dynamics in a host population.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Parameters:","category":"page"},{"location":"","page":"Home","title":"Home","text":"initial_population: Population of individuals\nparams: SimulationParameters object","category":"page"},{"location":"#sample_populations","page":"Home","title":"sample_populations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Simulates ecological sampling with imperfect detection.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Parameters:","category":"page"},{"location":"","page":"Home","title":"Home","text":"populations: Vector of populations across time steps\nparams: SamplingParameters object","category":"page"},{"location":"#create_interaction_matrix","page":"Home","title":"create_interaction_matrix","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Generates interaction matrices for simulation experiments.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Parameters:","category":"page"},{"location":"","page":"Home","title":"Home","text":"df: DataFrame with columns for interaction_strength, cf_ratio, priority_effects, strains","category":"page"},{"location":"","page":"Home","title":"Home","text":"OR","category":"page"},{"location":"","page":"Home","title":"Home","text":"strains: Number of strains\npriority_effects: Whether to use asymmetric interactions\ninteraction_strength: Strength of strain interactions\ncf_ratio: Ratio of competition to facilitation","category":"page"},{"location":"#Disease-Models-2","page":"Home","title":"Disease Models","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SI: Susceptible → Infected\nSIR: Susceptible → Infected → Recovered\nSEIR: Susceptible → Exposed → Infected → Recovered\nSEIRS: Susceptible → Exposed → Infected → Recovered → Susceptible","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each strain can use a different disease model within the same simulation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
